---
import { SITE } from "@consts";

const links = [
  { name: "Home", href: "/", target: "_self" },
  { name: "AI Tools", href: "/ai-tools", target: "_self" },
  { name: "The Pulse", href: "/pulse", target: "_self" },
  { name: "The Market", href: "/market", target: "_self" },
  { name: "The Resistance", href: "/blog", target: "_self", glowing: true },
  { name: "About", href: "/about", target: "_self" },
];
---

<header class="w-full sticky top-0 z-50 dark-header">
  <div class="container mx-auto flex items-center justify-between p-4 bg-background/95 backdrop-blur-md border-b border-border/20 mx-4">
    <a href="/" class="font-bold text-2xl sm:text-3xl md:text-4xl" style="font-family: 'Space Mono', 'Courier Prime', monospace;">
      Take Over
    </a>
    <div class="flex items-center space-x-4">
      <nav class="space-x-3 text-secondary hidden md:block">
        {
          links.map((link) => (
            <a
              href={link.href}
              class="hover:border-b-2 hover:border-dashed hover:border-secondary pb-0.5"
              style="font-family: 'Space Mono', 'Courier Prime', monospace;"
            >
              {link.name}
            </a>
          ))
        }
      </nav>
      <button
        id="theme-toggle"
        class="p-2 rounded-lg hover:bg-secondary/20 transition-colors"
        aria-label="Toggle theme"
      >
        <svg id="sun-icon" class="w-5 h-5 text-secondary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path>
        </svg>
        <svg id="moon-icon" class="w-5 h-5 text-secondary hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path>
        </svg>
      </button>
      <button
        id="menu-toggle"
        class="hamburger focus:outline-none flex md:hidden"
        aria-label="Toggle navigation"
      >
        <span class="hamburger-line"></span>
        <span class="hamburger-line"></span>
        <span class="hamburger-line"></span>
      </button>
    </div>
  </div>
  
  <!-- Mobile Menu Overlay -->
  <div id="menu-overlay" class="menu-overlay"></div>
  
  <!-- Mobile Menu Sidebar -->
  <div id="menu-mobile" class="mobile-menu dark-mobile-menu">
    <button id="menu-close" class="menu-close-btn" aria-label="Close menu">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
    <nav class="flex flex-col gap-6 text-xl mt-8">
      {
        links.map((link) => (
          <a
            href={link.href}
            class="menu-link hover:border-b-2 hover:border-dashed hover:border-secondary pb-0.5"
            style="font-family: 'Space Mono', 'Courier Prime', monospace;"
          >
            {link.name}
          </a>
        ))
      }
    </nav>
  </div>
</header>

<style>

  .hamburger {
    gap: 5px;
    cursor: pointer;
    position: relative;
    width: 24px;
    height: 21px;
    padding: 0;
    border: 0;
    background: transparent;
  }

  .hamburger-line {
    width: 24px;
    height: 3px;
    background-color: var(--color-secondary, #000000);
    transition: all 0.3s ease;
    position: absolute;
    left: 0;
  }

  .hamburger-line:nth-child(1) {
    top: 0;
  }

  .hamburger-line:nth-child(2) {
    top: 9px;
  }

  .hamburger-line:nth-child(3) {
    top: 18px;
  }

  .hamburger.active .hamburger-line:nth-child(1) {
    transform: rotate(45deg);
    top: 9px;
  }

  .hamburger.active .hamburger-line:nth-child(2) {
    display: none;
    opacity: 0;
  }

  .hamburger.active .hamburger-line:nth-child(3) {
    transform: rotate(-45deg);
    top: 9px;
  }

  header {
    width: 100%;
    position: sticky;
    top: 0;
    z-index: 1000;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15), 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .dark-header {
    box-shadow: 0 4px 20px rgba(255, 255, 255, 0.2), 0 2px 8px rgba(255, 255, 255, 0.15);
  }

  [data-theme="dark"] .dark-header {
    box-shadow: 0 4px 20px rgba(255, 255, 255, 0.2), 0 2px 8px rgba(255, 255, 255, 0.15) !important;
  }

  /* Mobile Menu Overlay */
  .menu-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    z-index: 998;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
  }

  .menu-overlay.active {
    opacity: 1;
    visibility: visible;
  }

  /* Mobile Menu Sidebar */
  .mobile-menu {
    position: fixed;
    top: 0;
    right: 0;
    width: 75%;
    max-width: 300px;
    height: 100vh;
    background: var(--color-background);
    z-index: 999;
    padding: 2rem 1.5rem;
    transform: translateX(100%);
    transition: transform 0.3s ease;
    overflow-y: auto;
    box-shadow: none; /* no glow when closed */
  }

  .dark-mobile-menu {
    box-shadow: none; /* no glow when closed */
  }

  [data-theme="dark"] .dark-mobile-menu.active {
    box-shadow: -4px 0 20px rgba(255, 255, 255, 0.2), -2px 0 8px rgba(255, 255, 255, 0.15) !important;
  }

  .mobile-menu.active {
    transform: translateX(0);
    box-shadow: -4px 0 20px rgba(0, 0, 0, 0.15), -2px 0 8px rgba(0, 0, 0, 0.1);
  }

  .menu-link {
    color: var(--color-secondary);
    text-decoration: none;
    display: block;
    word-break: break-word;
    overflow-wrap: break-word;
  }

  .menu-close-btn {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: none;
    border: none;
    color: var(--color-secondary);
    cursor: pointer;
    padding: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.2s ease;
  }

  .menu-close-btn:hover {
    transform: scale(1.1);
  }

  .menu-close-btn svg {
    width: 24px;
    height: 24px;
  }

  /* Mobile edge-to-edge */
  @media (max-width: 768px) {
    header .container {
      margin-left: 0.5rem;
      margin-right: 0.5rem;
    }
  }

  @media (max-width: 480px) {
    header .container {
      margin-left: 0.25rem;
      margin-right: 0.25rem;
      padding: 0.75rem;
    }
  }

  @media (min-width: 769px) {
    .mobile-menu,
    .menu-overlay {
      display: none;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const menuMobile = document.getElementById("menu-mobile");
    const menuOverlay = document.getElementById("menu-overlay");
    const toggle = document.getElementById("menu-toggle");
    const themeToggle = document.getElementById("theme-toggle");
    const sunIcon = document.getElementById("sun-icon");
    const moonIcon = document.getElementById("moon-icon");
    
    // Mobile menu toggle
    const openMenu = () => {
      menuMobile?.classList.add("active");
      menuOverlay?.classList.add("active");
      toggle?.classList.add("active");
      toggle?.setAttribute("aria-expanded", "true");
      document.body.style.overflow = "hidden";
      // Ensure correct glow is applied on open per theme
      const currentTheme = document.documentElement.getAttribute("data-theme") || "dark";
      if (menuMobile instanceof HTMLElement) {
        if (currentTheme === "dark") {
          menuMobile.style.setProperty('box-shadow', '-4px 0 20px rgba(255, 255, 255, 0.2), -2px 0 8px rgba(255, 255, 255, 0.15)');
        } else {
          menuMobile.style.setProperty('box-shadow', '-4px 0 20px rgba(0, 0, 0, 0.15), -2px 0 8px rgba(0, 0, 0, 0.1)');
        }
      }
    };

    const closeMenu = () => {
      menuMobile?.classList.remove("active");
      menuOverlay?.classList.remove("active");
      toggle?.classList.remove("active");
      toggle?.setAttribute("aria-expanded", "false");
      document.body.style.overflow = "";
      // Remove any glow when closed
      if (menuMobile instanceof HTMLElement) {
        menuMobile.style.removeProperty('box-shadow');
      }
    };

    toggle?.addEventListener("click", () => {
      const isOpen = menuMobile?.classList.contains("active");
      if (isOpen) {
        closeMenu();
      } else {
        openMenu();
      }
    });

    // Close menu when clicking overlay
    menuOverlay?.addEventListener("click", closeMenu);

    // Close menu when clicking close button
    const closeButton = document.getElementById("menu-close");
    closeButton?.addEventListener("click", closeMenu);

    // Close menu when clicking a link
    const menuLinks = menuMobile?.querySelectorAll("a");
    menuLinks?.forEach((link) => {
      link.addEventListener("click", closeMenu);
    });

            // Theme toggle
            const currentTheme = localStorage.getItem("theme") || "dark";
            document.documentElement.setAttribute("data-theme", currentTheme);
            
            if (currentTheme === "light") {
              sunIcon?.classList.add("hidden");
              moonIcon?.classList.remove("hidden");
            }

    themeToggle?.addEventListener("click", () => {
      const currentTheme = document.documentElement.getAttribute("data-theme");
      const newTheme = currentTheme === "dark" ? "light" : "dark";
      
      document.documentElement.setAttribute("data-theme", newTheme);
      localStorage.setItem("theme", newTheme);
      
      // Force update header shadow for dark theme
      const headerEl = document.querySelector('header');
      const mobileMenuEl = document.querySelector('.mobile-menu');
      const isMenuActive = mobileMenuEl?.classList.contains('active');
      if (newTheme === "dark") {
        if (headerEl instanceof HTMLElement) {
          headerEl.style.setProperty('box-shadow', '0 4px 20px rgba(255, 255, 255, 0.2), 0 2px 8px rgba(255, 255, 255, 0.15)');
        }
        // Only apply dark glow if menu is open
        if (mobileMenuEl instanceof HTMLElement) {
          if (isMenuActive) {
            mobileMenuEl.style.setProperty('box-shadow', '-4px 0 20px rgba(255, 255, 255, 0.2), -2px 0 8px rgba(255, 255, 255, 0.15)');
          } else {
            mobileMenuEl.style.removeProperty('box-shadow');
          }
        }
      } else {
        if (headerEl instanceof HTMLElement) {
          headerEl.style.setProperty('box-shadow', '0 4px 20px rgba(0, 0, 0, 0.15), 0 2px 8px rgba(0, 0, 0, 0.1)');
        }
        // Only apply light glow if menu is open
        if (mobileMenuEl instanceof HTMLElement) {
          if (isMenuActive) {
            mobileMenuEl.style.setProperty('box-shadow', '-4px 0 20px rgba(0, 0, 0, 0.15), -2px 0 8px rgba(0, 0, 0, 0.1)');
          } else {
            mobileMenuEl.style.removeProperty('box-shadow');
          }
        }
      }
      
      if (newTheme === "light") {
        sunIcon?.classList.add("hidden");
        moonIcon?.classList.remove("hidden");
      } else {
        sunIcon?.classList.remove("hidden");
        moonIcon?.classList.add("hidden");
      }
    });
  });
</script>
