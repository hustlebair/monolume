---
export interface TabCategory {
  id: string;
  label: string;
}

const categories: TabCategory[] = [
  { id: "all", label: "All Tools" },
  { id: "llm", label: "LLM" },
  { id: "coding", label: "AI Coding" },
  { id: "image", label: "Image Generation" },
  { id: "video", label: "Video Generation" },
  { id: "audio", label: "Audio/Music AI" },
  { id: "writing", label: "AI Writing" },
  { id: "research", label: "Research & Analysis" }
];

let activeTab = "all";
---

<div class="sticky-tab-navigation" id="tab-navigation">
  <div class="tab-container">
    <nav class="tab-nav" role="tablist">
      {categories.map((category, index) => (
        <>
          <button
            class={`tab-button ${activeTab === category.id ? 'active' : ''}`}
            data-category={category.id}
            role="tab"
            aria-selected={activeTab === category.id}
          >
            {category.label}
          </button>
          {index < categories.length - 1 && <div class="tab-divider"></div>}
        </>
      ))}
    </nav>
  </div>
</div>

<script>
  // Tab navigation functionality
  const tabNavigation = document.getElementById('tab-navigation');
  const tabButtons = document.querySelectorAll('.tab-button');
  const aiToolCards = document.querySelectorAll('.ai-tool-card');

  // Sticky behavior
  let isSticky = false;
  
  function handleScroll() {
    if (!tabNavigation) return;
    
    const rect = tabNavigation.getBoundingClientRect();
    const shouldBeSticky = rect.top <= 0;
    
    if (shouldBeSticky && !isSticky) {
      tabNavigation.classList.add('sticky-active');
      isSticky = true;
    } else if (!shouldBeSticky && isSticky) {
      tabNavigation.classList.remove('sticky-active');
      isSticky = false;
    }
  }

  // Tab switching functionality
  function switchTab(categoryId: string) {
    // Update active tab
    tabButtons.forEach(btn => {
      btn.classList.remove('active');
      btn.setAttribute('aria-selected', 'false');
    });
    
    const activeButton = document.querySelector(`[data-category="${categoryId}"]`);
    if (activeButton) {
      activeButton.classList.add('active');
      activeButton.setAttribute('aria-selected', 'true');
    }

    // Filter AI tool cards
    aiToolCards.forEach(card => {
      const cardElement = card as HTMLElement;
      const cardCategory = cardElement.getAttribute('data-category');
      if (categoryId === 'all' || cardCategory === categoryId) {
        cardElement.style.display = 'block';
        cardElement.style.animation = 'fadeInUp 0.3s ease';
      } else {
        cardElement.style.display = 'none';
      }
    });

    // Update URL hash for bookmarking
    if (categoryId !== 'all') {
      window.history.replaceState(null, '', `#${categoryId}`);
    } else {
      window.history.replaceState(null, '', window.location.pathname);
    }
  }

  // Event listeners
  tabButtons.forEach(button => {
    button.addEventListener('click', () => {
      const category = button.getAttribute('data-category');
      if (category) {
        switchTab(category);
      }
    });
  });

  // Handle initial load with hash
  window.addEventListener('load', () => {
    const hash = window.location.hash.slice(1);
    const validCategories = ['all', 'llm', 'coding', 'image', 'video', 'audio', 'writing', 'research'];
    if (hash && validCategories.includes(hash)) {
      switchTab(hash);
    }
  });

  // Scroll listener for sticky behavior
  window.addEventListener('scroll', handleScroll, { passive: true });

  // Mobile scroll behavior
  const tabScrollWrapper = document.querySelector('.tab-scroll-wrapper');
  if (tabScrollWrapper) {
    tabScrollWrapper.addEventListener('scroll', () => {
      // Add scroll indicators for mobile
      const scrollLeft = tabScrollWrapper.scrollLeft;
      const maxScroll = tabScrollWrapper.scrollWidth - tabScrollWrapper.clientWidth;
      
      tabScrollWrapper.classList.toggle('scroll-left', scrollLeft > 0);
      tabScrollWrapper.classList.toggle('scroll-right', scrollLeft < maxScroll);
    });
  }
</script>

<style>
  .sticky-tab-navigation {
    position: relative;
    z-index: 50;
    margin: 2rem 0;
    transition: all 0.3s ease;
  }

  .sticky-tab-navigation.sticky-active {
    position: sticky;
    top: 0;
    backdrop-filter: blur(10px);
    background: rgba(0, 0, 0, 0.8);
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
    margin: 0;
    padding: 1rem 0;
  }

  .tab-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1.5rem;
  }

  .tab-scroll-wrapper {
    overflow-x: auto;
    overflow-y: hidden;
    scrollbar-width: none;
    -ms-overflow-style: none;
    scroll-behavior: smooth;
    scroll-snap-type: x mandatory;
  }

  .tab-scroll-wrapper::-webkit-scrollbar {
    display: none;
  }

  .tab-nav {
    display: flex;
    gap: 0.75rem;
    min-width: max-content;
    padding: 0.5rem 0;
  }

  .tab-button {
    background: var(--gradient);
    color: white;
    border: none;
    border-radius: 12px;
    padding: 0.75rem 1.5rem;
    font-weight: 700;
    font-size: 0.875rem;
    cursor: pointer;
    transition: all 0.3s ease;
    white-space: nowrap;
    position: relative;
    overflow: hidden;
    min-height: 44px;
    display: flex;
    align-items: center;
    justify-content: center;
    scroll-snap-align: start;
  }

  .tab-button::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: var(--hover-gradient);
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .tab-button:hover::before {
    opacity: 1;
  }

  .tab-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
  }

  .tab-button.active {
    background: var(--hover-gradient);
    transform: scale(1.05);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
  }

  .tab-button.active::before {
    opacity: 0;
  }

  .tab-button:focus {
    outline: 2px solid rgba(255, 255, 255, 0.5);
    outline-offset: 2px;
  }

  /* Light mode adjustments */
  [data-theme="light"] .sticky-tab-navigation.sticky-active {
    background: rgba(255, 255, 255, 0.9);
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  }

  [data-theme="light"] .tab-button {
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  [data-theme="light"] .tab-button:hover {
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }

  [data-theme="light"] .tab-button.active {
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
  }

  /* Mobile optimizations */
  @media (max-width: 768px) {
    .tab-container {
      padding: 0 1rem;
    }

    .tab-nav {
      gap: 0.5rem;
      padding: 0.25rem 0;
    }

    .tab-button {
      padding: 0.625rem 1rem;
      font-size: 0.8rem;
      min-height: 44px;
    }

    .sticky-tab-navigation.sticky-active {
      padding: 0.75rem 0;
    }
  }

  @media (max-width: 480px) {
    .tab-button {
      padding: 0.5rem 0.75rem;
      font-size: 0.75rem;
    }
  }

  /* Animation for filtered content */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Scroll indicators for mobile */
  .tab-scroll-wrapper::before,
  .tab-scroll-wrapper::after {
    content: '';
    position: absolute;
    top: 0;
    bottom: 0;
    width: 20px;
    pointer-events: none;
    z-index: 10;
    transition: opacity 0.3s ease;
  }

  .tab-scroll-wrapper::before {
    left: 0;
    background: linear-gradient(to right, rgba(0, 0, 0, 0.8), transparent);
    opacity: 0;
  }

  .tab-scroll-wrapper::after {
    right: 0;
    background: linear-gradient(to left, rgba(0, 0, 0, 0.8), transparent);
    opacity: 0;
  }

  .tab-scroll-wrapper.scroll-left::before {
    opacity: 1;
  }

  .tab-scroll-wrapper.scroll-right::after {
    opacity: 1;
  }

  [data-theme="light"] .tab-scroll-wrapper::before {
    background: linear-gradient(to right, rgba(255, 255, 255, 0.9), transparent);
  }

  [data-theme="light"] .tab-scroll-wrapper::after {
    background: linear-gradient(to left, rgba(255, 255, 255, 0.9), transparent);
  }
</style>
